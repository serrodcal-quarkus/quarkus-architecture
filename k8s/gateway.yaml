apiVersion: v1
kind: Service
metadata:
  name: gateway
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: gateway
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        app: gateway
    spec:
      containers:
        - name: gateway
          image: nginx:1.17.10-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              protocol: TCP
          resources:
            limits:
              memory: 1G
              cpu: 1000m
            requests:
              memory: 1G
              cpu: 1000m
          volumeMounts:
          - name: gateway-config
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
          # statics folder: /usr/share/nginx/html
      volumes:
      - name: gateway-config
        configMap:
          name: gateway-cm
          items:
            - key: nginx.conf
              path: nginx.conf
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: gateway-cm
data:
  nginx.conf: |
    user  nginx;
    worker_processes  auto;

    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;

    events {
        worker_connections  1024;
    }

    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  65;

        #gzip  on;

        include /etc/nginx/conf.d/*.conf;

        server {
          listen 8080;

          location ~* ^/api/v1/employee/?(.*) {
            add_header 'Access-Control-Allow-Origin' '*';
            proxy_pass http://employee:8080;
          }

          location ~* ^/api/v1/department/?(.*) {
            add_header 'Access-Control-Allow-Origin' '*';
            proxy_pass http://department:8080;
          }

          location ~* ^/api/v1/hr/?(.*) {
            add_header 'Access-Control-Allow-Origin' '*';
            proxy_pass http://hr:8080;
          }

          #location /grafana/ {
          #  proxy_pass http://grafana:3000/;
          #  proxy_set_header Host $host;
          #  proxy_set_header X-Real-IP $remote_addr;
          #  proxy_set_header X-Forwarded-Host $host;
          #  proxy_set_header X-Forwarded-Server $host;
          #  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          #}

          #location /jaeger/ {
            #add_header 'Access-Control-Allow-Origin' '*';
          #  proxy_pass http://jaeger:16686/;
          #}

          #location ~ /kibana/(?<kibana_uri>.*) {
            # remote server that kibana is running on
          #  proxy_pass http://kibana:5601/$kibana_uri;
          #  proxy_set_header Authorization "Basic *****";
          #  proxy_set_header X-Forwarded-User $http_x_forwarded_for;
          #}

          #location /kibana/ {
          #  proxy_pass http://kibana:5601/;
          #  proxy_http_version 1.1;
          #  proxy_set_header Upgrade $http_upgrade;
          #  proxy_set_header Connection 'upgrade';
          #  proxy_set_header Host $host;
          #  proxy_cache_bypass $http_upgrade;
            #proxy_redirect off;
            #proxy_buffering off;
            #proxy_http_version 1.1;
            #proxy_set_header Connection "Keep-Alive";
            #proxy_set_header Proxy-Connection "Keep-Alive";
          #}

        }

    }
